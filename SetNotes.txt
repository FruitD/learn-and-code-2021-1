/*
 * Considerations for all functions / methods:
 *
 * - Be small and concise.
 * - Do one thing, and do it well.
 * - If we must use switch statements, bury them in low-level classes.
 * - Use descriptive names.
 * - Minimize argument count.
 * - Avoid flag arguments.
 * - Avoid side effects, including output arguments.
 * - Do something or answer something, but not both.
 * - Exceptions instead of error codes.
 * - DRY.
 * - Don't worry about getting it right on the first try.
 * - Revise until you get it right.
 */

// For our MVP:

namespace TBD
{
    public struct Card // data structure instead of object
    {
        public Unknown shape;
        public Unknown color;
        public Unknown shade;
        public Unknown number;
    }

    public class Set
    {
        public bool IsValid();
        public Unknown SetCardList(Unknown);
        public Unknown SetSearchTime(Unknown);
    }

    public class Deck
    {
        public Card Draw();
        public void Generate();
        public bool IsEmpty();
        public void Shuffle();
    }

    public class Tabletop
    {
        public Unknown AddCard(Unknown);
        public Unknown RemoveCards(Unknown);
    }

    public class Player
    {
        public Unknown ClaimSet();
        public Unknown Score(); // equal to count of completed sets
        private Unknown<Set> completedSets; // [[card1, card2, card3], [etc]]
    }

    public class ComputerPlayer : Player
    {
        public Unknown SearchTabletop(Unknown);
    }

    public struct GameRound // data structure instead of object?
    {
        public Deck deck;
        public Tabletop tabletop;
        public Unknown timer;
        public Unknown<Player> players; // players: []
    }

    public class Game
    {
        public Unknown NewRound(Unknown);
        private Unknown<GameRound> gameRounds;
    }

    // TO DO: What about our server?

    public class Program
    {
        public static void Main(string[] args)
        {
            // TO DO
        }
    }
}
